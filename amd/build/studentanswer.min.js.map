{"version":3,"file":"studentanswer.min.js","sources":["../src/studentanswer.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Defines the behavior of the student's answer form for a savpl.\n * @copyright  Astor Bizard, 2019\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/* globals Terminal */\n/* globals VPLTerminal */\ndefine(['jquery', 'qtype_savpl/codeeditors',\n'qtype_savpl/vplservice', 'qtype_savpl/scriptsloader'], function($, CodeEditors, VPLService, ScriptsLoader) {\n\n    /**\n     * For VPLTerminal constructor - determines what to display on titlebar.\n     * In our case, we just want to display if process is running or exited.\n     * @param {String} key Key to map.\n     * @return {String} Mapped string.\n     */\n    function str(key) {\n        switch (key) {\n            case 'console': return '[Process';\n            case 'connected':\n            case 'connecting':\n            case 'running': return 'running]';\n            case 'connection_closed': return 'exited]';\n            default: return key;\n        }\n    }\n\n    /**\n     * Escape special html characters in a text.\n     * @param {String} text HTML text to escape.\n     * @return {String} Escaped text.\n     */\n    function escapeHtml(text) {\n        var map = {'&': '&amp;', '<': '&lt;', '>': '&gt;', '\"': '&quot;', \"'\": '&#039;'};\n        return text.replace(/[&<>\"']/g, function(c) {\n            return map[c];\n        });\n    }\n\n    /**\n     * Build an html string to display the specified field of the result,\n     * formatting titles (field name) and subtitles (lines starting with '-').\n     * @param {Object} result Evaluation/execution result object.\n     * @param {String} field Field of result to display.\n     * @param {String} level CSS class fragment for error level.\n     * @return {String} Formatted result as HTML fragment.\n     */\n    function makeResultHtml(result, field, level) {\n        if (result[field]) {\n            var formattedText = '';\n            escapeHtml(result[field]).split('\\n').forEach(function(line) {\n                if (line.charAt(0) == '-') {\n                    line = '<span class=\"vpl-test-title font-italic rounded px-1\">' + line + '</span>';\n                }\n                formattedText += line + '\\n';\n            });\n            return '<span class=\"vpl-result-title vpl-title-' + level + ' d-block font-weight-bold border border-dark pl-1 mb-1\">' +\n                        M.util.get_string(field, 'qtype_savpl') +\n                    '</span>' +\n                    formattedText.trim();\n        }\n        return '';\n    }\n\n    /**\n     * Display result on screen in specified display.\n     * If result is null, this method will try to get it from data-result attribute.\n     * @param {String} displayId ID of DOM element in which result should be displayed.\n     * @param {?Object} result Evaluation/execution result object, or null.\n     */\n    function displayResult(displayId, result) {\n        var $display = $('#' + displayId);\n        if (result === null) {\n            // This method parses the JSON by itself - no need to parse it.\n            result = $display.data('result');\n        }\n        var html = makeResultHtml(result, 'compilation', 'error')\n            + makeResultHtml(result, 'evaluation', 'info')\n            + makeResultHtml(result, 'execerror', 'error')\n            + makeResultHtml(result, 'evaluationerror', 'error');\n        if (!html) {\n            html = makeResultHtml(result, 'execution', 'error');\n        }\n        $display[html ? 'show' : 'hide']();\n        $display.html(html);\n    }\n\n    /**\n     * Set up student answer box (ace editor, terminal and reset/correction, run and pre-check buttons).\n     * @param {String|Number} questionId Question ID, used for DOM identifiers.\n     * @param {String|Number} vplId VPL ID, used for ajax calls.\n     * @param {String|Number} userId User ID, used for ajax calls.\n     * @param {String} aceTheme Theme to set ace editors to (typically user's selected theme on VPL plugin).\n     * @param {String} textareaName HTML name attribute of textarea used for student answer.\n     * @param {Number} vplVersion Version number of the VPL plugin (used to decide how to load scripts as they moved in v3.4.0).\n     */\n    function setup(questionId, userId, aceTheme, textareaName, vplVersion) {\n        // This is the textarea that will recieve student's answer.\n        var $textarea = $('textarea[name=\"' + textareaName + '\"]');\n        console.log('TEXTAREANAME');\n        console.log(textareaName);\n        var $resetAndCorrectionButtons = $('#qvpl_reset_q' + questionId + ', #qvpl_correction_q' + questionId);\n\n        // Setup ace editor THEN buttons (so Run and Check correctly take current ace text).\n        CodeEditors.setupQuestionEditor(aceTheme, $textarea, $resetAndCorrectionButtons, $textarea.data('lineoffset'), function() {\n\n            if ($textarea.attr('readonly') == 'readonly') {\n                // We are in review (readonly) mode - do nothing more.\n                return;\n            }\n\n            ScriptsLoader.loadVPLTerminal(vplVersion, function() {\n                // Setup terminal to fix number of rows (default is too much to fit within a quiz).\n                var oldPrototype = Terminal.prototype;\n                Terminal = function(data) { // eslint-disable-line no-global-assign\n                    data.rows = 10;\n                    return new oldPrototype.constructor(data);\n                };\n                Terminal.prototype = oldPrototype;\n\n                // Initialize the terminal on the wrapper.\n                var wrapperId = 'terminal_wrapper_q' + questionId;\n                var terminal = new VPLTerminal(wrapperId, wrapperId, str);\n                $('#' + wrapperId).dialog('option', 'draggable', false);\n\n                // Deactivate message function (it normally displays a ticking timer, which is annoying).\n                terminal.setMessage = function() {\n                    return;\n                };\n\n                // Move the terminal to a nice place within the question box.\n                var qvplButtons = '#qvpl_buttons_q' + questionId;\n                var $globalTerminalWrapper = $('#' + wrapperId).parent();\n                $globalTerminalWrapper.insertAfter(qvplButtons);\n\n                // Override connect function, that indirectly sets the terminal to be displayed somewhere else.\n                var oldConnect = terminal.connect;\n                terminal.connect = function() {\n                    oldConnect.apply(terminal, arguments);\n                    $globalTerminalWrapper.css('top', 0).css('left', 0);\n                    $('body > .ui-widget-overlay.ui-front').first().remove(); // Remove the modal lock overlay.\n                };\n\n                // Change close button style to match the general question style.\n                $globalTerminalWrapper.find('.ui-dialog-titlebar-close')\n                .html('<i class=\"fa fa-close\"></i>')\n                .addClass('btn btn-secondary close-terminal');\n\n                // Setup a VPL button (run, debug, or evaluate).\n                var setupButton = function(action, icon, filestype) {\n                    var $button = $(qvplButtons + ' button[data-action=\"' + action + '\"]');\n                    var $icon = $('<i class=\"fa fa-' + icon + '\"></i>');\n                    $('<span class=\"ml-2\">').append($icon).appendTo($button);\n                    var reenableButtons = function() {\n                        $icon.attr('class', 'fa fa-' + icon);\n                        $('.qvpl-buttons *').removeAttr('disabled');\n                    };\n\n                    $button.click(function() {\n                        $('.qvpl-buttons *').attr('disabled', 'disabled');\n                        $('.close-terminal').trigger('click');\n                        $icon.attr('class', 'fa fa-refresh fa-spin');\n                        // We got nested callbacks, but we can't promisify them,\n                        // as callback may be called several times depending on the underlying websocket messages order.\n                        VPLService.call('save', questionId, $textarea.val(), filestype)\n                        .then(function() {\n                            return VPLService.call('exec', action, questionId, userId, terminal, function(result) {\n                                displayResult('vpl_result_q' + questionId, result);\n                                reenableButtons();\n                            });\n                        })\n                        .fail(function(details) {\n                            displayResult('vpl_result_q' + questionId, {execerror: details});\n                            reenableButtons();\n                        });\n                    });\n                };\n\n                setupButton('run', 'rocket', 'run');\n                setupButton('debug', 'check-square-o', 'precheck');\n                setupButton('evaluate', 'check-square-o', 'precheck');\n            });\n        });\n    }\n\n    return {\n        setup: setup,\n        displayResult: displayResult\n    };\n});\n"],"names":["define","$","CodeEditors","VPLService","ScriptsLoader","str","key","makeResultHtml","result","field","level","formattedText","text","map","replace","c","split","forEach","line","charAt","M","util","get_string","trim","displayResult","displayId","$display","data","html","setup","questionId","userId","aceTheme","textareaName","vplVersion","$textarea","console","log","$resetAndCorrectionButtons","setupQuestionEditor","attr","loadVPLTerminal","oldPrototype","Terminal","prototype","rows","constructor","wrapperId","terminal","VPLTerminal","dialog","setMessage","qvplButtons","$globalTerminalWrapper","parent","insertAfter","oldConnect","connect","apply","arguments","css","first","remove","find","addClass","setupButton","action","icon","filestype","$button","$icon","append","appendTo","reenableButtons","removeAttr","click","trigger","call","val","then","fail","details","execerror"],"mappings":"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"}