/**
 * Provides utility method to communicate with a VPL (this is an API wrapper to use VPLUtil)
 * @copyright  Astor Bizard, 2019
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
define("qtype_savpl/vplservice",["jquery","core/url"],(function($,url){function getAjaxUrl(questionId,userId,file){return void 0===file&&(file="edit"),url.relativeUrl("/question/type/savpl/ajax")+"/"+file+".json.php?id="+questionId+"&userId="+userId+"&action="}var VPLService={},cache={reqfile:[],execfiles:[]};return VPLService.info=function(filesType,questionId){return null!=cache[filesType][questionId]?$.Deferred().resolve(cache[filesType][questionId]).promise():("reqfile"==filesType?VPLUtil.requestAction("resetfiles","",{},getAjaxUrl(questionId,"")):VPLUtil.requestAction("load","",{},getAjaxUrl(questionId,"","executionfiles"))).then((function(response){var files="reqfile"==filesType?response.files[0]:response.files;return cache[filesType][questionId]=files,files})).promise()},VPLService.save=function(questionId,answer,filestype){return $.ajax(url.relativeUrl("/question/type/savpl/ajax/save.json.php"),{data:{qid:questionId,answer:answer,filestype:filestype},method:"POST"}).promise()},VPLService.exec=function(action,questionId,userId,terminal,callback){var options={ajaxurl:getAjaxUrl(questionId,userId),resultSet:!1,setResult:function(result){this.resultSet=!0,callback(result)},close:function(){var _this=this;setTimeout((function(){_this.resultSet||callback({execerror:M.util.get_string("execerrordetails","qtype_savpl")})}),600)},getConsole:function(){return terminal},run:function(type,conInfo,ws){var _this=this;terminal.connect(conInfo.executionURL,(function(){ws.close(),_this.resultSet||callback({})}))}};return VPLUtil.requestAction(action,"",{},options.ajaxurl).done((function(response){VPLUtil.webSocketMonitor(response,"","",options)})).promise()},{call:function(service){VPLUtil.progressBar=function(){this.setLabel=function(){},this.close=function(){},this.isClosed=function(){return!0}};for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++)args[_key-1]=arguments[_key];return VPLService[service](...args)},langOfFile:function(fileName){return VPLUtil.langType(fileName.split(".").pop())},isBinary:function(fileName){return VPLUtil.isBinary(fileName)}}}));

//# sourceMappingURL=vplservice.min.js.map